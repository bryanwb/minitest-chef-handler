{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Motivation\r\n\r\nWorking at Engine Yard I have to maintain a quite complicated set of Chef recipes that we use to set up our customers' instances. I need to be sure that everytime someone modifies those recipes, mostly myself, the provisioned services continue working as expected.\r\n\r\nThere are other solutions that evaluate the configured node after the recipes\r\nare loaded without arriving to the converge phase, like [ChefSpec](https://github.com/acrmp/chefspec) or [rspec-chef](https://github.com/calavera/rspec-chef), but I needed something to write integration tests easily. I checked [chef-minitest](https://github.com/fujin/chef-minitest) but I'm still amazed by the ugly code that I have to write into the recipes to make it work.\r\n\r\n## Installation\r\n\r\n```\r\n$ gem install minitest-chef-handler\r\n```\r\n\r\n## Usage\r\n\r\n1. Add the report handler to your client.rb or solo.rb file:\r\n\r\n```ruby\r\nrequire 'minitest-chef-handler'\r\n\r\nreport_handlers << MiniTest::Chef::Handler.new\r\n```\r\n\r\n2. Write your tests as normal MiniTest cases extending from MiniTest::Chef::TestCase:\r\n\r\n```ruby\r\nclass TestNginx < MiniTest::Chef::TestCase\r\n  def test_config_file_exist\r\n    assert File.exist?('/etc/nginx.conf')\r\n  end\r\nend\r\n```\r\n\r\nYou still have access to Chef's `run_status`, `node` and `run_context` from your tests:\r\n\r\n```ruby\r\nclass TestNginx < MiniTest::Chef::TestCase\r\n  def test_succeed\r\n    assert run_status.success?\r\n  end\r\nend\r\n```\r\n\r\n## Further configuration\r\n\r\nThese are the options the handler accepts:\r\n\r\n* :path => where your test files are, './test/test_*.rb' by default\r\n* :filter => filter test names on pattern\r\n* :seed => set random seed\r\n* :verbose => show progress processing files.\r\n\r\nExample:\r\n\r\n```ruby\r\nhandler = MiniTest::Chef::Handler.new({\r\n  :path    => './cookbooks/test/*_test.rb',\r\n  :filter  => 'foo',\r\n  :seed    => srand,\r\n  :verbose => true})\r\n\r\nreport_handlers << handler\r\n```\r\n\r\n## Chef server distribution\r\n\r\nThe instructions abow have described how to use it in a Chef solo installation. If you want to distribute the handler to your Chef server check either the chef_handler cookbooks in the examples or [minitest-handler-cookbook](https://github.com/btm/minitest-handler-cookbook).\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2012 David Calavera. See LICENSE for details.\r\n","name":"Minitest-chef-handler","google":"","tagline":"Run minitest suites after your Chef recipes to check the status of your system."}